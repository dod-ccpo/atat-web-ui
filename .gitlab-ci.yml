workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_REF_NAME == 'main'
    - if: $CI_COMMIT_TAG

variables:
  FARGATE_TASK_DEFINITION: "nodejs"
  RELEASE_ZIP_FILE: release.zip
  PACKAGE_REGISTRY_BASE_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/web-ui"

default:
  tags:
    - ui

stages:
  - build
  - package

assert_package_lock_version:
  stage: build
  script:
    -   |
      file="package-lock.json"
      expectedVersion="3"
      lockFileVersion="$(jq -r .lockfileVersion "$file")"
      if [ "$lockFileVersion" != "$expectedVersion" ]; then
      echo "$file: lockfileVersion ($lockFileVersion) is invalid (expected: $expectedVersion)"
      exit 1
      else
      echo "$file: lockfileVersion ($lockFileVersion) is the expected value ($expectedVersion)"
      fi

detect_secrets:
  stage: build
  variables:
    FARGATE_TASK_DEFINITION: "python"
  script:
    - git ls-files -z | xargs -0 detect-secrets-hook --baseline .secrets.baseline

sonar_scan:
  stage: build
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: "0"
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    -   |
      echo "Running sonar scanner..."
      sonar-scanner

npm_test:
  stage: build
  cache:
    key: $CI_COMMIT_REF_SLUG
    paths:
      - .npm/
  before_script:
    - npm ci --cache .npm --prefer-offline
  variables:
    testURL: "%BASE_URL_PLACEHOLDER%/test"
    BASE_API_URL: "%BASE_URL_PLACEHOLDER%"
    SNOWUSER: unused
    SNOWPASS: unused
  rules:
    - if: $CI_COMMIT_TAG
      variables:
        VERSION: $CI_COMMIT_TAG
    - if: $CI_COMMIT_TAG == null
      variables:
        VERSION: $CI_COMMIT_SHORT_SHA
  script:
    -   |
      echo "Running build..."
      npm run lint
      npm run build
      npm run test
      find dist/ -type f > dist/sbom.txt
  artifacts:
    expire_in: 1 month
    paths:
      - dist/*
      - coverage/lcov-report/*

release_job:
  stage: package
  rules:
    - if: $CI_COMMIT_TAG
      variables:
        VERSION: $CI_COMMIT_TAG
  script:
    - |
      echo "Packaging release $VERSION ..."
      zip -r ${RELEASE_ZIP_FILE} dist
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file ./${RELEASE_ZIP_FILE} "${PACKAGE_REGISTRY_BASE_URL}/$VERSION/${RELEASE_ZIP_FILE}"
      release-cli create --name "Release $CI_COMMIT_TAG" --tag-name $CI_COMMIT_TAG \
        --assets-link "{\"name\":\"${RELEASE_ZIP_FILE}\",\"url\":\"${PACKAGE_REGISTRY_BASE_URL}/$VERSION/${RELEASE_ZIP_FILE}\",\"link_type\":\"package\"}"