---
name: Run checks on PRs, build and upload app, conditionally create release (on tags only)

on:
  pull_request:
  push:
    tags:
      - '**'
    branches:
      - main
      - develop
      - release
permissions:
  contents: read

jobs:
  assertPackageLockVersion:
    name: Ensure package-lock lockfileVersion has not changed
    runs-on: ubuntu-latest
    if: ${{ !startsWith(github.ref, 'refs/tags/') }} # don't need this for tag pushes
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
      - name: Check package-lock.json
        run: |
          file="package-lock.json"
          expectedVersion="3"
          lockFileVersion="$(jq -r .lockfileVersion "$file")"
          if [ "$lockFileVersion" != "$expectedVersion" ]; then
            echo "$file: lockfileVersion ($lockFileVersion) is invalid (expected: $expectedVersion)"
            exit 1
          else
            echo "$file: lockfileVersion ($lockFileVersion) is the expected value ($expectedVersion)"
          fi
  lint:
    name: Run linter
    runs-on: ubuntu-latest
    if: ${{ !startsWith(github.ref, 'refs/tags/') }} # don't need this for tag pushes
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: npm
      - name: Install project dependencies
        run: npm ci
      - name: Run linter
        run: npm run lint
  buildTestScan:
    name: Build, test, and run SonarCloud scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Sonar Scanner requires full history for blame information
          fetch-depth: 0
      - name: 'Get Previous tag'
        id: previoustag
        uses: "WyriHaximus/github-action-get-previous-tag@v1"
      - name: Set Version Variable - Release
        if: ${{ startsWith(github.ref, 'refs/tags/v') }} 
        run: echo "VERSION=${{ steps.previoustag.outputs.tag }}" >> $GITHUB_ENV
      - name: Set Version Variable - Non-release
        if: ${{ !startsWith(github.ref, 'refs/tags/v') }}  
        run: echo "VERSION=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
      - name: Setup NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: npm
      - name: Install project dependencies
        run: npm ci
     # - name: Build the project
     #   run: npm run build
     #   env:
     #     testURL: "%BASE_URL_PLACEHOLDER%/test"
     #     BASE_API_URL: "%BASE_URL_PLACEHOLDER%"
     #     SNOWUSER: "${{ secrets.VUE_SNOW_USER }}"
     #     SNOWPASS: ""
     #     VERSION: "${{ env.VERSION }}"
     # - name: Test the project
     #   run: npm run test
     #   if: ${{ !startsWith(github.ref, 'refs/tags/') }} # don't need this for tag pushes
     # - name: Trigger SonarCloud
     #   uses: SonarSource/sonarcloud-github-action@master
     #   if: ${{ !startsWith(github.ref, 'refs/tags/') }} # don't need this for tag pushes
     #   env:
     #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
     #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
     # - name: Create SBOM
     #   run: |
     #       find dist/ -type f > dist/sbom.txt
     # - name: Preserve build artifact
     #   uses: actions/upload-artifact@v3
     #   with:
     #     path: dist/
     #     name: atat-web-ui
     # - name: Preserve test coverage report
     #   uses: actions/upload-artifact@v3
     #   with:
     #     path: coverage/lcov-report/
     #     name: lcov-report
     # - name: Zip dist folder
     #   run: zip -r release.zip dist
     #   if: startsWith(github.ref, 'refs/tags/')
     # - name: Release
     #   uses: softprops/action-gh-release@v1
     #   if: startsWith(github.ref, 'refs/tags/')
     #   with:
     #     token: ${{ secrets.WORKFLOWS_PAT }}
     #     files: |
     #       release.zip

  secretScan:
    name: Scan for secrets
    runs-on: ubuntu-latest
    if: ${{ !startsWith(github.ref, 'refs/tags/') }} # don't need this for tag pushes
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"
          architecture: "x64"
      - name: Install detect-secrets
        run: pip install detect-secrets
      - name: Scan for new (not-yet-allowed) secrets
        run: >-
          git ls-files -z |
          xargs -0 detect-secrets-hook --baseline .secrets.baseline
